{"id":"2d22cfd9-2f08-4911-a191-92173757405b","zed":"context","version":"0.4.0","text":"\n\n\n```js frontend/app/play/_components/ResizeableMap.js\n\"use client\";\n\nimport { MapTrifold, X } from \"@phosphor-icons/react\";\nimport MapWrapper from \"./MapWrapper\";\nimport * as motion from \"framer-motion/client\";\nimport { useState } from \"react\";\n\nexport default function ResizeableMap({ gameState, submitGuess }) {\n  const [viewMap, setViewMap] = useState(false);\n\n  if (viewMap) {\n    return (\n      <div className=\"fixed inset-0 z-[900] backdrop-blur-md\">\n        <div className=\"scale-[90%] overflow-hidden rounded-xl\">\n          <MapWrapper\n            gameState={gameState}\n            submitGuess={submitGuess}\n            onDialogContinue={() => setViewMap(false)}\n          />\n        </div>\n        <motion.button\n          whileHover={{ scale: 1.2 }}\n          whileTap={{ scale: 0.8 }}\n          onClick={() => setViewMap(false)}\n          className=\"absolute right-4 top-4 rounded-full bg-rose-600 p-2.5\"\n        >\n          <X className=\"h-6 w-6 text-white\" />\n        </motion.button>\n      </div>\n    );\n  }\n\n  return (\n    <motion.button\n      whileHover={{ scale: 1.2, x: \"-.9rem\", y: \"-.9rem\" }}\n      onClick={() => setViewMap(true)}\n      className=\"fixed bottom-0 right-0 z-[800] flex flex-col items-center rounded-tl-full bg-rose-600 pb-8 pl-12 pr-8 pt-12 text-white shadow\"\n    >\n      <MapTrifold className=\"h-12 w-12\" />\n      <span className=\"font-medium\">Open Map</span>\n    </motion.button>\n  );\n}\n```\n\n```js frontend/app/play/_components/ResultsDialog.js\n\"use client\";\nimport { MapContainer, Polyline } from \"react-leaflet\";\nimport MapImageWrapper from \"./MapImageWrapper\";\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function ResultsDialog({\n  gameState,\n  open,\n  setDialogOpen,\n  onContinue,\n}) {\n  const map = useRef(null);\n  const [actuallyShow, setActuallyShow] = useState(false);\n\n  useEffect(() => {\n    if (gameState.allLocsUsed.length > 0) {\n      setTimeout(() => setActuallyShow(true), 10);\n    }\n  }, [gameState.allLocsUsed]);\n\n  if (!open) return null;\n\n  function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n    var R = 6371; // Radius of the Earth in kilometers\n    var dLat = deg2rad(lat2 - lat1); // Difference in latitude\n    var dLon = deg2rad(lon2 - lon1); // Difference in longitude\n    var a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(deg2rad(lat1)) *\n        Math.cos(deg2rad(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var distance = R * c; // Distance in kilometers\n    return distance;\n  }\n\n  function deg2rad(deg) {\n    return deg * (Math.PI / 180);\n  }\n\n  var actualLoc = [\n    gameState.allLocsUsed[gameState.allLocsUsed.length - 1]?.latitude,\n    gameState.allLocsUsed[gameState.allLocsUsed.length - 1]?.longitude,\n  ];\n  var userGuessLoc = [gameState.lastGuessLat, gameState.lastGuessLng];\n  var dialogCenter = [\n    (actualLoc[0] + userGuessLoc[0]) / 2,\n    (actualLoc[1] + userGuessLoc[1]) / 2,\n  ];\n  var dist = getDistanceFromLatLonInKm(\n    actualLoc[0],\n    actualLoc[1],\n    userGuessLoc[0],\n    userGuessLoc[1],\n  );\n  console.log(dist);\n  var myZoom = 0;\n  if (dist < 0.1) {\n    myZoom = 18;\n  } else if (dist < 0.6) {\n    myZoom = 16;\n  } else if (dist < 1) {\n    myZoom = 15;\n  } else {\n    myZoom = 14;\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-[1000] flex items-center justify-center\">\n      {/* Background overlay with blur */}\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 backdrop-blur-md\"></div>\n\n      {/* Dialog container */}\n      <dialog\n        className=\"relative z-[1100] mx-4 w-full max-w-md rounded-lg bg-white p-6 text-center\"\n        open={open}\n      >\n        <div className=\"mb-4 text-lg font-semibold\">Results</div>\n        <p>Your guess was {gameState.lastGuessD} meters away.</p>\n        <p>You earned {gameState.lastGuessPoints} points!</p>\n\n        {gameState.allLocsUsed.length > 0 && actuallyShow && (\n          <div className=\"mt-4 flex justify-center\">\n            <MapContainer\n              center={dialogCenter}\n              minZoom={14}\n              zoom={myZoom}\n              maxZoom={20}\n              scrollWheelZoom={true}\n              className=\"h-96 w-96\"\n            >\n              <MapImageWrapper\n                mapRef={map}\n                guess={userGuessLoc}\n                setGuess={() => {}}\n                actualLocation={actualLoc}\n              />\n              <Polyline\n                positions={[actualLoc, userGuessLoc]} // Line connecting the two locations\n                pathOptions={{\n                  color: \"black\", // Color of the line\n                  dashArray: \"10, 10\", // Dotted line style (alternating dashes)\n                  weight: 3, // Line thickness\n                }}\n              />\n            </MapContainer>\n          </div>\n        )}\n\n        <button\n          className=\"mt-6 rounded-full bg-rose-600 px-4 py-2 text-white hover:bg-rose-700\"\n          onClick={() => {\n            onContinue();\n            setDialogOpen(false);\n          }}\n        >\n          Continue\n        </button>\n      </dialog>\n    </div>\n  );\n}\n```\n\n```js frontend/app/play/_components/ImageView.js\n\"use client\";\n\nimport Image from \"next/image\";\nimport { useState, useEffect } from \"react\";\nimport ResizeableMap from \"./ResizeableMap\";\n\nfunction getFullUrl(id) {\n  return `https://utfs.io/a/e9dxf42twp/${id}`;\n}\n\nexport default function ImageView({ submitGuess, gameState }) {\n  const [photo, setPhoto] = useState(null);\n\n  useEffect(() => {\n    if (gameState.loc) {\n      setPhoto(gameState.loc);\n    }\n  }, [gameState.loc]);\n\n  if (!photo) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <>\n      <div className=\"relative flex h-dvh w-dvw items-center justify-center bg-gray-500\">\n        <div>\n          <Image fill src={getFullUrl(photo.imageId)} className=\"blur-xl\" />\n        </div>\n        <Image\n          fill\n          src={getFullUrl(photo.imageId)}\n          className=\"h-full w-full object-contain object-center\"\n        />\n      </div>\n      <ResizeableMap gameState={gameState} submitGuess={submitGuess} />\n    </>\n  );\n}\n```\n\n```js frontend/app/play/_components/MapWrapper.js\n/*\n  What is this file?:\n    A React Component\n      It is in the folder /app/play/_components because it is only used on the /play page.\n      The underscore in the _components folder tells Next.js not to serve the files directly to the client.\n      This prevents users from, for example, loading JUST our MapWrapper.\n      Think of it like a private method in Java, \n      It needs to be part of something bigger (our page.js file) to be accessible.\n      Learn more here: \n        https://nextjs.org/docs/app/building-your-application/routing/colocation#private-folders\n  Server component or client component?:\n    Client Component\n      We know it's a Client Component because \"use client\"; is the first line of the file.\n      If you're keeping track, this is the first time we cross over from Server Component to Client Component.\n      (remember we can't import Server Components into Client Components so unless we use a workaround,\n      everything further down the tree needs to be a Client Component)\n        Learn more about the workaround here: \n          https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns#supported-pattern-passing-server-components-to-client-components-as-props\n      We need this to be a Client Component because we're using React Hooks, which need to run on the client.\n      (imagine if our useState ran on the Server, every user would have the exact same state. that would be a disaster...)\n  What are we using this file for?:\n    This Component does a couple things:\n      It sets up client-side state for the user's current guess (where they last clicked on the page).\n      It renders our Leaflet Map and the button used to submit the user's guess.\n      It also sets up client-side state to change the map view from Minneapolis to St.Paul and vice versa.\n    This is imported directly into our page.js file.\n*/\n\n\"use client\";\n\nimport { useEffect, useState, useRef } from \"react\";\nimport * as motion from \"framer-motion/client\";\nimport { MapContainer } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport MapImageWrapper from \"./MapImageWrapper\";\nimport ResultsDialog from \"./ResultsDialog\";\n\nconst minneapolisCenter = [44.97528, -93.23538];\nconst stPaulCenter = [44.98655, -93.18201];\n\nexport default function MapWrapper({\n  submitGuess,\n  gameState,\n  onDialogContinue,\n}) {\n  const [viewStPaul, setViewStPaul] = useState(false);\n  const [guess, setGuess] = useState(\n    viewStPaul ? stPaulCenter : minneapolisCenter,\n  );\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  // we create this ref here but we actually set it in MapImageWrapper\n  const mapRef = useRef(null);\n\n  /*\n    The array at the end of this useEffect tells React when to run the code inside of it\n    Any time something in the array (called a dependency array) changes, the code runs.\n    In our case any time the gameState is updated (when the user submits a guess)\n    or any time the viewStPaul state is updated (when the user switches to Minneapolis / St Paul),\n    we reset the guess state to the center and use the mapRef we set in MapImageWrapper to pan the Leaflet map to the center.\n  */\n  useEffect(() => {\n    if (mapRef.current) {\n      if (viewStPaul) {\n        mapRef.current.setView(stPaulCenter, 16);\n        setGuess(stPaulCenter);\n      } else {\n        mapRef.current.setView(minneapolisCenter, 16);\n        setGuess(minneapolisCenter);\n      }\n    }\n  }, [gameState, viewStPaul]);\n\n  useEffect(() => {\n    if (gameState.gameStarted) {\n      setDialogOpen(true);\n    }\n  }, [gameState.round]);\n\n  return (\n    <>\n      <MapContainer\n        center={viewStPaul ? stPaulCenter : minneapolisCenter}\n        minZoom={15}\n        zoom={16}\n        maxZoom={18}\n        scrollWheelZoom={true}\n        className=\"h-dvh w-dvw\"\n      >\n        <MapImageWrapper mapRef={mapRef} setGuess={setGuess} guess={guess} />\n      </MapContainer>\n      <motion.button\n        className=\"fixed left-0 right-0 top-6 z-[1000] mx-auto w-min whitespace-nowrap rounded-full bg-rose-600 px-4 py-2 font-medium text-white hover:bg-rose-700\"\n        whileHover={{ scale: 1.2 }}\n        whileTap={{ scale: 0.8 }}\n        onClick={() => setViewStPaul((currentState) => !currentState)}\n      >\n        Go to {viewStPaul ? \"Minneapolis\" : \"St Paul\"}\n      </motion.button>\n      <motion.button\n        className=\"fixed bottom-6 left-0 right-0 z-[1000] mx-auto w-min whitespace-nowrap rounded-full bg-rose-600 px-4 py-2 font-medium text-white hover:bg-rose-700\"\n        whileHover={{ scale: 1.2 }}\n        whileTap={{ scale: 0.8 }}\n        onClick={() => submitGuess(guess)}\n      >\n        Submit Guess\n      </motion.button>\n      <ResultsDialog\n        gameState={gameState}\n        open={dialogOpen}\n        setDialogOpen={setDialogOpen}\n        onContinue={onDialogContinue}\n      />\n    </>\n  );\n}\n```\n\nThe Results Dialog persists within the MapWrapper even after I use the Continue button. Can you fix that\nTo ensure that the `ResultsDialog` properly closes when the \"Continue\" button is clicked, we need to make sure that the `dialogOpen` state is correctly managed. Specifically, we should ensure that the `setDialogOpen(false)` call in the `ResultsDialog` component properly updates the state in the `MapWrapper` component.\n\nLet's make sure that the `onContinue` function in the `MapWrapper` component properly handles the state update and that the `ResultsDialog` component correctly calls this function.\n\nHere's the updated code for both `MapWrapper.js` and `ResultsDialog.js`:\n\n### `MapWrapper.js`\n```js\n\"use client\";\n\nimport { useEffect, useState, useRef } from \"react\";\nimport * as motion from \"framer-motion/client\";\nimport { MapContainer } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport MapImageWrapper from \"./MapImageWrapper\";\nimport ResultsDialog from \"./ResultsDialog\";\n\nconst minneapolisCenter = [44.97528, -93.23538];\nconst stPaulCenter = [44.98655, -93.18201];\n\nexport default function MapWrapper({\n  submitGuess,\n  gameState,\n  onDialogContinue,\n}) {\n  const [viewStPaul, setViewStPaul] = useState(false);\n  const [guess, setGuess] = useState(\n    viewStPaul ? stPaulCenter : minneapolisCenter,\n  );\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  // we create this ref here but we actually set it in MapImageWrapper\n  const mapRef = useRef(null);\n\n  /*\n    The array at the end of this useEffect tells React when to run the code inside of it\n    Any time something in the array (called a dependency array) changes, the code runs.\n    In our case any time the gameState is updated (when the user submits a guess)\n    or any time the viewStPaul state is updated (when the user switches to Minneapolis / St Paul),\n    we reset the guess state to the center and use the mapRef we set in MapImageWrapper to pan the Leaflet map to the center.\n  */\n  useEffect(() => {\n    if (mapRef.current) {\n      if (viewStPaul) {\n        mapRef.current.setView(stPaulCenter, 16);\n        setGuess(stPaulCenter);\n      } else {\n        mapRef.current.setView(minneapolisCenter, 16);\n        setGuess(minneapolisCenter);\n      }\n    }\n  }, [gameState, viewStPaul]);\n\n  useEffect(() => {\n    if (gameState.gameStarted) {\n      setDialogOpen(true);\n    }\n  }, [gameState.round]);\n\n  const handleDialogContinue = () => {\n    setDialogOpen(false);\n    onDialogContinue();\n  };\n\n  return (\n    <>\n      <MapContainer\n        center={viewStPaul ? stPaulCenter : minneapolisCenter}\n        minZoom={15}\n        zoom={16}\n        maxZoom={18}\n        scrollWheelZoom={true}\n        className=\"h-dvh w-dvw\"\n      >\n        <MapImageWrapper mapRef={mapRef} setGuess={setGuess} guess={guess} />\n      </MapContainer>\n      <motion.button\n        className=\"fixed left-0 right-0 top-6 z-[1000] mx-auto w-min whitespace-nowrap rounded-full bg-rose-600 px-4 py-2 font-medium text-white hover:bg-rose-700\"\n        whileHover={{ scale: 1.2 }}\n        whileTap={{ scale: 0.8 }}\n        onClick={() => setViewStPaul((currentState) => !currentState)}\n      >\n        Go to {viewStPaul ? \"Minneapolis\" : \"St Paul\"}\n      </motion.button>\n      <motion.button\n        className=\"fixed bottom-6 left-0 right-0 z-[1000] mx-auto w-min whitespace-nowrap rounded-full bg-rose-600 px-4 py-2 font-medium text-white hover:bg-rose-700\"\n        whileHover={{ scale: 1.2 }}\n        whileTap={{ scale: 0.8 }}\n        onClick={() => submitGuess(guess)}\n      >\n        Submit Guess\n      </motion.button>\n      <ResultsDialog\n        gameState={gameState}\n        open={dialogOpen}\n        setDialogOpen={setDialogOpen}\n        onContinue={handleDialogContinue}\n      />\n    </>\n  );\n}\n```\n\n### `ResultsDialog.js`\n```js\n\"use client\";\nimport { MapContainer, Polyline } from \"react-leaflet\";\nimport MapImageWrapper from \"./MapImageWrapper\";\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function ResultsDialog({\n  gameState,\n  open,\n  setDialogOpen,\n  onContinue,\n}) {\n  const map = useRef(null);\n  const [actuallyShow, setActuallyShow] = useState(false);\n\n  useEffect(() => {\n    if (gameState.allLocsUsed.length > 0) {\n      setTimeout(() => setActuallyShow(true), 10);\n    }\n  }, [gameState.allLocsUsed]);\n\n  if (!open) return null;\n\n  function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n    var R = 6371; // Radius of the Earth in kilometers\n    var dLat = deg2rad(lat2 - lat1); // Difference in latitude\n    var dLon = deg2rad(lat2 - lon1); // Difference in longitude\n    var a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(deg2rad(lat1)) *\n        Math.cos(deg2rad(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var distance = R * c; // Distance in kilometers\n    return distance;\n  }\n\n  function deg2rad(deg) {\n    return deg * (Math.PI / 180);\n  }\n\n  var actualLoc = [\n    gameState.allLocsUsed[gameState.allLocsUsed.length - 1]?.latitude,\n    gameState.allLocsUsed[gameState.allLocsUsed.length - 1]?.longitude,\n  ];\n  var userGuessLoc = [gameState.lastGuessLat, gameState.lastGuessLng];\n  var dialogCenter = [\n    (actualLoc[0] + userGuessLoc[0]) / 2,\n    (actualLoc[1] + userGuessLoc[1]) / 2,\n  ];\n  var dist = getDistanceFromLatLonInKm(\n    actualLoc[0],\n    actualLoc[1],\n    userGuessLoc[0],\n    userGuessLoc[1],\n  );\n  console.log(dist);\n  var myZoom = 0;\n  if (dist < 0.1) {\n    myZoom = 18;\n  } else if (dist < 0.6) {\n    myZoom = 16;\n  } else if (dist < 1) {\n    myZoom = 15;\n  } else {\n    myZoom = 14;\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-[1000] flex items-center justify-center\">\n      {/* Background overlay with blur */}\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 backdrop-blur-md\"></div>\n\n      {/* Dialog container */}\n      <dialog\n        className=\"relative z-[1100] mx-4 w-full max-w-md rounded-lg bg-white p-6 text-center\"\n        open={open}\n      >\n        <div className=\"mb-4 text-lg font-semibold\">Results</div>\n        <p>Your guess was {gameState.lastGuessD} meters away.</p>\n        <p>You earned {gameState.lastGuessPoints} points!</p>\n\n        {gameState.allLocsUsed.length > 0 && actuallyShow && (\n          <div className=\"mt-4 flex justify-center\">\n            <MapContainer\n              center={dialogCenter}\n              minZoom={14}\n              zoom={myZoom}\n              maxZoom={20}\n              scrollWheelZoom={true}\n              className=\"h-96 w-96\"\n            >\n              <MapImageWrapper\n                mapRef={map}\n                guess={userGuessLoc}\n                setGuess={() => {}}\n                actualLocation={actualLoc}\n              />\n              <Polyline\n                positions={[actualLoc, userGuessLoc]} // Line connecting the two locations\n                pathOptions={{\n                  color: \"black\", // Color of the line\n                  dashArray: \"10, 10\", // Dotted line style (alternating dashes)\n                  weight: 3, // Line thickness\n                }}\n              />\n            </MapContainer>\n          </div>\n        )}\n\n        <button\n          className=\"mt-6 rounded-full bg-rose-600 px-4 py-2 text-white hover:bg-rose-700\"\n          onClick={() => {\n            onContinue();\n          }}\n        >\n          Continue\n        </button>\n      </dialog>\n    </div>\n  );\n}\n```\n\nIn this updated code, the `handleDialogContinue` function in `MapWrapper` ensures that the `dialogOpen` state is set to `false` and then calls the `onDialogContinue` function. This function is passed down to the `ResultsDialog` component, which calls it when the \"Continue\" button is clicked. This ensures that the dialog properly closes when the button is clicked.\nThis doesn't work. Although the dialog and the map are closed when I click continue, when I go to the next question and click open map, I can still see the dialog. I want the dialog to disappear when I click continue and only appear when I click the submit guess again.\n\nTo ensure that the `ResultsDialog` only appears when a guess is submitted and disappears when the \"Continue\" button is clicked, we need to manage the state more carefully. Specifically, we need to ensure that the `dialogOpen` state is reset properly and that the dialog does not persist across different rounds.\n\nHere's the updated code to achieve this:\n\n### `MapWrapper.js`\n```js\n\"use client\";\n\nimport { useEffect, useState, useRef } from \"react\";\nimport * as motion from \"framer-motion/client\";\nimport { MapContainer } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport MapImageWrapper from \"./MapImageWrapper\";\nimport ResultsDialog from \"./ResultsDialog\";\n\nconst minneapolisCenter = [44.97528, -93.23538];\nconst stPaulCenter = [44.98655, -93.18201];\n\nexport default function MapWrapper({\n  submitGuess,\n  gameState,\n  onDialogContinue,\n}) {\n  const [viewStPaul, setViewStPaul] = useState(false);\n  const [guess, setGuess] = useState(\n    viewStPaul ? stPaulCenter : minneapolisCenter,\n  );\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  // we create this ref here but we actually set it in MapImageWrapper\n  const mapRef = useRef(null);\n\n  /*\n    The array at the end of this useEffect tells React when to run the code inside of it\n    Any time something in the array (called a dependency array) changes, the code runs.\n    In our case any time the gameState is updated (when the user submits a guess)\n    or any time the viewStPaul state is updated (when the user switches to Minneapolis / St Paul),\n    we reset the guess state to the center and use the mapRef we set in MapImageWrapper to pan the Leaflet map to the center.\n  */\n  useEffect(() => {\n    if (mapRef.current) {\n      if (viewStPaul) {\n        mapRef.current.setView(stPaulCenter, 16);\n        setGuess(stPaulCenter);\n      } else {\n        mapRef.current.setView(minneapolisCenter, 16);\n        setGuess(minneapolisCenter);\n      }\n    }\n  }, [gameState, viewStPaul]);\n\n  useEffect(() => {\n    if (gameState.gameStarted) {\n      setDialogOpen(false); // Ensure dialog is closed when a new game starts\n    }\n  }, [gameState.round]);\n\n  const handleDialogContinue = () => {\n    setDialogOpen(false);\n    onDialogContinue();\n  };\n\n  const handleSubmitGuess = (guess) => {\n    submitGuess(guess);\n    setDialogOpen(true); // Open the dialog when a guess is submitted\n  };\n\n  return (\n    <>\n      <MapContainer\n        center={viewStPaul ? stPaulCenter : minneapolisCenter}\n        minZoom={15}\n        zoom={16}\n        maxZoom={18}\n        scrollWheelZoom={true}\n        className=\"h-dvh w-dvw\"\n      >\n        <MapImageWrapper mapRef={mapRef} setGuess={setGuess} guess={guess} />\n      </MapContainer>\n      <motion.button\n        className=\"fixed left-0 right-0 top-6 z-[1000] mx-auto w-min whitespace-nowrap rounded-full bg-rose-600 px-4 py-2 font-medium text-white hover:bg-rose-700\"\n        whileHover={{ scale: 1.2 }}\n        whileTap={{ scale: 0.8 }}\n        onClick={() => setViewStPaul((currentState) => !currentState)}\n      >\n        Go to {viewStPaul ? \"Minneapolis\" : \"St Paul\"}\n      </motion.button>\n      <motion.button\n        className=\"fixed bottom-6 left-0 right-0 z-[1000] mx-auto w-min whitespace-nowrap rounded-full bg-rose-600 px-4 py-2 font-medium text-white hover:bg-rose-700\"\n        whileHover={{ scale: 1.2 }}\n        whileTap={{ scale: 0.8 }}\n        onClick={() => handleSubmitGuess(guess)}\n      >\n        Submit Guess\n      </motion.button>\n      <ResultsDialog\n        gameState={gameState}\n        open={dialogOpen}\n        setDialogOpen={setDialogOpen}\n        onContinue={handleDialogContinue}\n      />\n    </>\n  );\n}\n```\n\n### `ResultsDialog.js`\n```js\n\"use client\";\nimport { MapContainer, Polyline } from \"react-leaflet\";\nimport MapImageWrapper from \"./MapImageWrapper\";\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function ResultsDialog({\n  gameState,\n  open,\n  setDialogOpen,\n  onContinue,\n}) {\n  const map = useRef(null);\n  const [actuallyShow, setActuallyShow] = useState(false);\n\n  useEffect(() => {\n    if (gameState.allLocsUsed.length > 0) {\n      setTimeout(() => setActuallyShow(true), 10);\n    }\n  }, [gameState.allLocsUsed]);\n\n  if (!open) return null;\n\n  function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n    var R = 6371; // Radius of the Earth in kilometers\n    var dLat = deg2rad(lat2 - lat1); // Difference in latitude\n    var dLon = deg2rad(lat2 - lon1); // Difference in longitude\n    var a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(deg2rad(lat1)) *\n        Math.cos(deg2rad(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var distance = R * c; // Distance in kilometers\n    return distance;\n  }\n\n  function deg2rad(deg) {\n    return deg * (Math.PI / 180);\n  }\n\n  var actualLoc = [\n    gameState.allLocsUsed[gameState.allLocsUsed.length - 1]?.latitude,\n    gameState.allLocsUsed[gameState.allLocsUsed.length - 1]?.longitude,\n  ];\n  var userGuessLoc = [gameState.lastGuessLat, gameState.lastGuessLng];\n  var dialogCenter = [\n    (actualLoc[0] + userGuessLoc[0]) / 2,\n    (actualLoc[1] + userGuessLoc[1]) / 2,\n  ];\n  var dist = getDistanceFromLatLonInKm(\n    actualLoc[0],\n    actualLoc[1],\n    userGuessLoc[0],\n    userGuessLoc[1],\n  );\n  console.log(dist);\n  var myZoom = 0;\n  if (dist < 0.1) {\n    myZoom = 18;\n  } else if (dist < 0.6) {\n    myZoom = 16;\n  } else if (dist < 1) {\n    myZoom = 15;\n  } else {\n    myZoom = 14;\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-[1000] flex items-center justify-center\">\n      {/* Background overlay with blur */}\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 backdrop-blur-md\"></div>\n\n      {/* Dialog container */}\n      <dialog\n        className=\"relative z-[1100] mx-4 w-full max-w-md rounded-lg bg-white p-6 text-center\"\n        open={open}\n      >\n        <div className=\"mb-4 text-lg font-semibold\">Results</div>\n        <p>Your guess was {gameState.lastGuessD} meters away.</p>\n        <p>You earned {gameState.lastGuessPoints} points!</p>\n\n        {gameState.allLocsUsed.length > 0 && actuallyShow && (\n          <div className=\"mt-4 flex justify-center\">\n            <MapContainer\n              center={dialogCenter}\n              minZoom={14}\n              zoom={myZoom}\n              maxZoom={20}\n              scrollWheelZoom={true}\n              className=\"h-96 w-96\"\n            >\n              <MapImageWrapper\n                mapRef={map}\n                guess={userGuessLoc}\n                setGuess={() => {}}\n                actualLocation={actualLoc}\n              />\n              <Polyline\n                positions={[actualLoc, userGuessLoc]} // Line connecting the two locations\n                pathOptions={{\n                  color: \"black\", // Color of the line\n                  dashArray: \"10, 10\", // Dotted line style (alternating dashes)\n                  weight: 3, // Line thickness\n                }}\n              />\n            </MapContainer>\n          </div>\n        )}\n\n        <button\n          className=\"mt-6 rounded-full bg-rose-600 px-4 py-2 text-white hover:bg-rose-700\"\n          onClick={() => {\n            onContinue();\n          }}\n        >\n          Continue\n        </button>\n      </dialog>\n    </div>\n  );\n}\n```\n\nIn this updated code:\n1. The `handleSubmitGuess` function in `MapWrapper` sets `dialogOpen` to `true` when a guess is submitted.\n2. The `handleDialogContinue` function in `MapWrapper` sets `dialogOpen` to `false` and calls `onDialogContinue`.\n3. The `ResultsDialog` component calls `onContinue` when the \"Continue\" button is clicked, which ensures the dialog is properly closed.\n4. The `useEffect` hook in `MapWrapper` ensures that the dialog is closed when a new game starts.\n\nThis should ensure that the `ResultsDialog` only appears when a guess is submitted and disappears when the \"Continue\" button is clicked, without persisting across different rounds.\nBut now the Results Dialog disappears immediately without waiting for me to click continue \nI apologize for the oversight. It seems the `dialogOpen` state is being set to `false` prematurely. We need to ensure that the dialog remains open until the \"Continue\" button is clicked.\n\nLet's adjust the logic to ensure the dialog only opens when a guess is submitted and closes when the \"Continue\" button is clicked.\n\n### `MapWrapper.js`\n```js\n\"use client\";\n\nimport { useEffect, useState, useRef } from \"react\";\nimport * as motion from \"framer-motion/client\";\nimport { MapContainer } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport MapImageWrapper from \"./MapImageWrapper\";\nimport ResultsDialog from \"./ResultsDialog\";\n\nconst minneapolisCenter = [44.97528, -93.23538];\nconst stPaulCenter = [44.98655, -93.18201];\n\nexport default function MapWrapper({\n  submitGuess,\n  gameState,\n  onDialogContinue,\n}) {\n  const [viewStPaul, setViewStPaul] = useState(false);\n  const [guess, setGuess] = useState(\n    viewStPaul ? stPaulCenter : minneapolisCenter,\n  );\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  // we create this ref here but we actually set it in MapImageWrapper\n  const mapRef = useRef(null);\n\n  /*\n    The array at the end of this useEffect tells React when to run the code inside of it\n    Any time something in the array (called a dependency array) changes, the code runs.\n    In our case any time the gameState is updated (when the user submits a guess)\n    or any time the viewStPaul state is updated (when the user switches to Minneapolis / St Paul),\n    we reset the guess state to the center and use the mapRef we set in MapImageWrapper to pan the Leaflet map to the center.\n  */\n  useEffect(() => {\n    if (mapRef.current) {\n      if (viewStPaul) {\n        mapRef.current.setView(stPaulCenter, 16);\n        setGuess(stPaulCenter);\n      } else {\n        mapRef.current.setView(minneapolisCenter, 16);\n        setGuess(minneapolisCenter);\n      }\n    }\n  }, [gameState, viewStPaul]);\n\n  useEffect(() => {\n    if (gameState.round > 0) {\n      setDialogOpen(true);\n    }\n  }, [gameState.round]);\n\n  const handleDialogContinue = () => {\n    setDialogOpen(false);\n    onDialogContinue();\n  };\n\n  const handleSubmitGuess = (guess) => {\n    submitGuess(guess);\n    setDialogOpen(true); // Open the dialog when a guess is submitted\n  };\n\n  return (\n    <>\n      <MapContainer\n        center={viewStPaul ? stPaulCenter : minneapolisCenter}\n        minZoom={15}\n        zoom={16}\n        maxZoom={18}\n        scrollWheelZoom={true}\n        className=\"h-dvh w-dvw\"\n      >\n        <MapImageWrapper mapRef={mapRef} setGuess={setGuess} guess={guess} />\n      </MapContainer>\n      <motion.button\n        className=\"fixed left-0 right-0 top-6 z-[1000] mx-auto w-min whitespace-nowrap rounded-full bg-rose-600 px-4 py-2 font-medium text-white hover:bg-rose-700\"\n        whileHover={{ scale: 1.2 }}\n        whileTap={{ scale: 0.8 }}\n        onClick={() => setViewStPaul((currentState) => !currentState)}\n      >\n        Go to {viewStPaul ? \"Minneapolis\" : \"St Paul\"}\n      </motion.button>\n      <motion.button\n        className=\"fixed bottom-6 left-0 right-0 z-[1000] mx-auto w-min whitespace-nowrap rounded-full bg-rose-600 px-4 py-2 font-medium text-white hover:bg-rose-700\"\n        whileHover={{ scale: 1.2 }}\n        whileTap={{ scale: 0.8 }}\n        onClick={() => handleSubmitGuess(guess)}\n      >\n        Submit Guess\n      </motion.button>\n      <ResultsDialog\n        gameState={gameState}\n        open={dialogOpen}\n        setDialogOpen={setDialogOpen}\n        onContinue={handleDialogContinue}\n      />\n    </>\n  );\n}\n```\n\n### `ResultsDialog.js`\n```js\n\"use client\";\nimport { MapContainer, Polyline } from \"react-leaflet\";\nimport MapImageWrapper from \"./MapImageWrapper\";\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function ResultsDialog({\n  gameState,\n  open,\n  setDialogOpen,\n  onContinue,\n}) {\n  const map = useRef(null);\n  const [actuallyShow, setActuallyShow] = useState(false);\n\n  useEffect(() => {\n    if (gameState.allLocsUsed.length > 0) {\n      setTimeout(() => setActuallyShow(true), 10);\n    }\n  }, [gameState.allLocsUsed]);\n\n  if (!open) return null;\n\n  function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n    var R = 6371; // Radius of the Earth in kilometers\n    var dLat = deg2rad(lat2 - lat1); // Difference in latitude\n    var dLon = deg2rad(lat2 - lon1); // Difference in longitude\n    var a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(deg2rad(lat1)) *\n        Math.cos(deg2rad(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var distance = R * c; // Distance in kilometers\n    return distance;\n  }\n\n  function deg2rad(deg) {\n    return deg * (Math.PI / 180);\n  }\n\n  var actualLoc = [\n    gameState.allLocsUsed[gameState.allLocsUsed.length - 1]?.latitude,\n    gameState.allLocsUsed[gameState.allLocsUsed.length - 1]?.longitude,\n  ];\n  var userGuessLoc = [gameState.lastGuessLat, gameState.lastGuessLng];\n  var dialogCenter = [\n    (actualLoc[0] + userGuessLoc[0]) / 2,\n    (actualLoc[1] + userGuessLoc[1]) / 2,\n  ];\n  var dist = getDistanceFromLatLonInKm(\n    actualLoc[0],\n    actualLoc[1],\n    userGuessLoc[0],\n    userGuessLoc[1],\n  );\n  console.log(dist);\n  var myZoom = 0;\n  if (dist < 0.1) {\n    myZoom = 18;\n  } else if (dist < 0.6) {\n    myZoom = 16;\n  } else if (dist < 1) {\n    myZoom = 15;\n  } else {\n    myZoom = 14;\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-[1000] flex items-center justify-center\">\n      {/* Background overlay with blur */}\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 backdrop-blur-md\"></div>\n\n      {/* Dialog container */}\n      <dialog\n        className=\"relative z-[1100] mx-4 w-full max-w-md rounded-lg bg-white p-6 text-center\"\n        open={open}\n      >\n        <div className=\"mb-4 text-lg font-semibold\">Results</div>\n        <p>Your guess was {gameState.lastGuessD} meters away.</p>\n        <p>You earned {gameState.lastGuessPoints} points!</p>\n\n        {gameState.allLocsUsed.length > 0 && actuallyShow && (\n          <div className=\"mt-4 flex justify-center\">\n            <MapContainer\n              center={dialogCenter}\n              minZoom={14}\n              zoom={myZoom}\n              maxZoom={20}\n              scrollWheelZoom={true}\n              className=\"h-96 w-96\"\n            >\n              <MapImageWrapper\n                mapRef={map}\n                guess={userGuessLoc}\n                setGuess={() => {}}\n                actualLocation={actualLoc}\n              />\n              <Polyline\n                positions={[actualLoc, userGuessLoc]} // Line connecting the two locations\n                pathOptions={{\n                  color: \"black\", // Color of the line\n                  dashArray: \"10, 10\", // Dotted line style (alternating dashes)\n                  weight: 3, // Line thickness\n                }}\n              />\n            </MapContainer>\n          </div>\n        )}\n\n        <button\n          className=\"mt-6 rounded-full bg-rose-600 px-4 py-2 text-white hover:bg-rose-700\"\n          onClick={() => {\n            onContinue();\n          }}\n        >\n          Continue\n        </button>\n      </dialog>\n    </div>\n  );\n}\n```\n\nIn this updated code:\n1. The `handleSubmitGuess` function in `MapWrapper` sets `dialogOpen` to `true` when a guess is submitted.\n2. The `handleDialogContinue` function in `MapWrapper` sets `dialogOpen` to `false` and calls `onDialogContinue`.\n3. The `ResultsDialog` component calls `onContinue` when the \"Continue\" button is clicked, which ensures the dialog is properly closed.\n4. The `useEffect` hook in `MapWrapper` ensures that the dialog is opened when a new round starts.\n\nThis should ensure that the `ResultsDialog` only appears when a guess is submitted and disappears when the \"Continue\" button is clicked, without disappearing prematurely.\nNow I have the original issue again.\nI understand the issue now. We need to ensure that the `ResultsDialog` only appears when a guess is submitted and disappears when the \"Continue\" button is clicked, without persisting across different rounds. \n\nLet's refine the logic to ensure the dialog state is managed correctly.\n\n### `MapWrapper.js`\n```js\n\"use client\";\n\nimport { useEffect, useState, useRef } from \"react\";\nimport * as motion from \"framer-motion/client\";\nimport { MapContainer } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport MapImageWrapper from \"./MapImageWrapper\";\nimport ResultsDialog from \"./ResultsDialog\";\n\nconst minneapolisCenter = [44.97528, -93.23538];\nconst stPaulCenter = [44.98655, -93.18201];\n\nexport default function MapWrapper({\n  submitGuess,\n  gameState,\n  onDialogContinue,\n}) {\n  const [viewStPaul, setViewStPaul] = useState(false);\n  const [guess, setGuess] = useState(\n    viewStPaul ? stPaulCenter : minneapolisCenter,\n  );\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  // we create this ref here but we actually set it in MapImageWrapper\n  const mapRef = useRef(null);\n\n  /*\n    The array at the end of this useEffect tells React when to run the code inside of it\n    Any time something in the array (called a dependency array) changes, the code runs.\n    In our case any time the gameState is updated (when the user submits a guess)\n    or any time the viewStPaul state is updated (when the user switches to Minneapolis / St Paul),\n    we reset the guess state to the center and use the mapRef we set in MapImageWrapper to pan the Leaflet map to the center.\n  */\n  useEffect(() => {\n    if (mapRef.current) {\n      if (viewStPaul) {\n        mapRef.current.setView(stPaulCenter, 16);\n        setGuess(stPaulCenter);\n      } else {\n        mapRef.current.setView(minneapolisCenter, 16);\n        setGuess(minneapolisCenter);\n      }\n    }\n  }, [gameState, viewStPaul]);\n\n  useEffect(() => {\n    if (gameState.round > 0) {\n      setDialogOpen(false); // Ensure dialog is closed when a new round starts\n    }\n  }, [gameState.round]);\n\n  const handleDialogContinue = () => {\n    setDialogOpen(false);\n    onDialogContinue();\n  };\n\n  const handleSubmitGuess = (guess) => {\n    submitGuess(guess);\n    setDialogOpen(true); // Open the dialog when a guess is submitted\n  };\n\n  return (\n    <>\n      <MapContainer\n        center={viewStPaul ? stPaulCenter : minneapolisCenter}\n        minZoom={15}\n        zoom={16}\n        maxZoom={18}\n        scrollWheelZoom={true}\n        className=\"h-dvh w-dvw\"\n      >\n        <MapImageWrapper mapRef={mapRef} setGuess={setGuess} guess={guess} />\n      </MapContainer>\n      <motion.button\n        className=\"fixed left-0 right-0 top-6 z-[1000] mx-auto w-min whitespace-nowrap rounded-full bg-rose-600 px-4 py-2 font-medium text-white hover:bg-rose-700\"\n        whileHover={{ scale: 1.2 }}\n        whileTap={{ scale: 0.8 }}\n        onClick={() => setViewStPaul((currentState) => !currentState)}\n      >\n        Go to {viewStPaul ? \"Minneapolis\" : \"St Paul\"}\n      </motion.button>\n      <motion.button\n        className=\"fixed bottom-6 left-0 right-0 z-[1000] mx-auto w-min whitespace-nowrap rounded-full bg-rose-600 px-4 py-2 font-medium text-white hover:bg-rose-700\"\n        whileHover={{ scale: 1.2 }}\n        whileTap={{ scale: 0.8 }}\n        onClick={() => handleSubmitGuess(guess)}\n      >\n        Submit Guess\n      </motion.button>\n      <ResultsDialog\n        gameState={gameState}\n        open={dialogOpen}\n        setDialogOpen={setDialogOpen}\n        onContinue={handleDialogContinue}\n      />\n    </>\n  );\n}\n```\n\n### `ResultsDialog.js`\n```js\n\"use client\";\nimport { MapContainer, Polyline } from \"react-leaflet\";\nimport MapImageWrapper from \"./MapImageWrapper\";\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function ResultsDialog({\n  gameState,\n  open,\n  setDialogOpen,\n  onContinue,\n}) {\n  const map = useRef(null);\n  const [actuallyShow, setActuallyShow] = useState(false);\n\n  useEffect(() => {\n    if (gameState.allLocsUsed.length > 0) {\n      setTimeout(() => setActuallyShow(true), 10);\n    }\n  }, [gameState.allLocsUsed]);\n\n  if (!open) return null;\n\n  function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n    var R = 6371; // Radius of the Earth in kilometers\n    var dLat = deg2rad(lat2 - lat1); // Difference in latitude\n    var dLon = deg2rad(lat2 - lon1); // Difference in longitude\n    var a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(deg2rad(lat1)) *\n        Math.cos(deg2rad(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var distance = R * c; // Distance in kilometers\n    return distance;\n  }\n\n  function deg2rad(deg) {\n    return deg * (Math.PI / 180);\n  }\n\n  var actualLoc = [\n    gameState.allLocsUsed[gameState.allLocsUsed.length - 1]?.latitude,\n    gameState.allLocsUsed[gameState.allLocsUsed.length - 1]?.longitude,\n  ];\n  var userGuessLoc = [gameState.lastGuessLat, gameState.lastGuessLng];\n  var dialogCenter = [\n    (actualLoc[0] + userGuessLoc[0]) / 2,\n    (actualLoc[1] + userGuessLoc[1]) / 2,\n  ];\n  var dist = getDistanceFromLatLonInKm(\n    actualLoc[0],\n    actualLoc[1],\n    userGuessLoc[0],\n    userGuessLoc[1],\n  );\n  console.log(dist);\n  var myZoom = 0;\n  if (dist < 0.1) {\n    myZoom = 18;\n  } else if (dist < 0.6) {\n    myZoom = 16;\n  } else if (dist < 1) {\n    myZoom = 15;\n  } else {\n    myZoom = 14;\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-[1000] flex items-center justify-center\">\n      {/* Background overlay with blur */}\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 backdrop-blur-md\"></div>\n\n      {/* Dialog container */}\n      <dialog\n        className=\"relative z-[1100] mx-4 w-full max-w-md rounded-lg bg-white p-6 text-center\"\n        open={open}\n      >\n        <div className=\"mb-4 text-lg font-semibold\">Results</div>\n        <p>Your guess was {gameState.lastGuessD} meters away.</p>\n        <p>You earned {gameState.lastGuessPoints} points!</p>\n\n        {gameState.allLocsUsed.length > 0 && actuallyShow && (\n          <div className=\"mt-4 flex justify-center\">\n            <MapContainer\n              center={dialogCenter}\n              minZoom={14}\n              zoom={myZoom}\n              maxZoom={20}\n              scrollWheelZoom={true}\n              className=\"h-96 w-96\"\n            >\n              <MapImageWrapper\n                mapRef={map}\n                guess={userGuessLoc}\n                setGuess={() => {}}\n                actualLocation={actualLoc}\n              />\n              <Polyline\n                positions={[actualLoc, userGuessLoc]} // Line connecting the two locations\n                pathOptions={{\n                  color: \"black\", // Color of the line\n                  dashArray: \"10, 10\", // Dotted line style (alternating dashes)\n                  weight: 3, // Line thickness\n                }}\n              />\n            </MapContainer>\n          </div>\n        )}\n\n        <button\n          className=\"mt-6 rounded-full bg-rose-600 px-4 py-2 text-white hover:bg-rose-700\"\n          onClick={() => {\n            onContinue();\n          }}\n        >\n          Continue\n        </button>\n      </dialog>\n    </div>\n  );\n}\n```\n\nIn this updated code:\n1. The `handleSubmitGuess` function in `MapWrapper` sets `dialogOpen` to `true` when a guess is submitted.\n2. The `handleDialogContinue` function in `MapWrapper` sets `dialogOpen` to `false` and calls `onDialogContinue`.\n3. The `ResultsDialog` component calls `onContinue` when the \"Continue\" button is clicked, which ensures the dialog is properly closed.\n4. The `useEffect` hook in `MapWrapper` ensures that the dialog is closed when a new round starts.\n\nThis should ensure that the `ResultsDialog` only appears when a guess is submitted and disappears when the \"Continue\" button is clicked, without persisting across different rounds.\n```js frontend/app/play/_components/ImageView.js\n\"use client\";\n\nimport Image from \"next/image\";\nimport { useState, useEffect } from \"react\";\nimport ResizeableMap from \"./ResizeableMap\";\n\nfunction getFullUrl(id) {\n  return `https://utfs.io/a/e9dxf42twp/${id}`;\n}\n\nexport default function ImageView({ submitGuess, gameState }) {\n  const [photo, setPhoto] = useState(null);\n\n  useEffect(() => {\n    if (gameState.loc) {\n      setPhoto(gameState.loc);\n    }\n  }, [gameState.loc]);\n\n  if (!photo) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <>\n      <div className=\"relative flex h-dvh w-dvw items-center justify-center bg-gray-500\">\n        <div>\n          <Image fill src={getFullUrl(photo.imageId)} className=\"blur-xl\" />\n        </div>\n        <Image\n          fill\n          src={getFullUrl(photo.imageId)}\n          className=\"h-full w-full object-contain object-center\"\n        />\n      </div>\n      <ResizeableMap gameState={gameState} submitGuess={submitGuess} />\n    </>\n  );\n}\n```\n\n```js frontend/app/play/_components/MapWrapper.js\n/*\n  What is this file?:\n    A React Component\n      It is in the folder /app/play/_components because it is only used on the /play page.\n      The underscore in the _components folder tells Next.js not to serve the files directly to the client.\n      This prevents users from, for example, loading JUST our MapWrapper.\n      Think of it like a private method in Java, \n      It needs to be part of something bigger (our page.js file) to be accessible.\n      Learn more here: \n        https://nextjs.org/docs/app/building-your-application/routing/colocation#private-folders\n  Server component or client component?:\n    Client Component\n      We know it's a Client Component because \"use client\"; is the first line of the file.\n      If you're keeping track, this is the first time we cross over from Server Component to Client Component.\n      (remember we can't import Server Components into Client Components so unless we use a workaround,\n      everything further down the tree needs to be a Client Component)\n        Learn more about the workaround here: \n          https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns#supported-pattern-passing-server-components-to-client-components-as-props\n      We need this to be a Client Component because we're using React Hooks, which need to run on the client.\n      (imagine if our useState ran on the Server, every user would have the exact same state. that would be a disaster...)\n  What are we using this file for?:\n    This Component does a couple things:\n      It sets up client-side state for the user's current guess (where they last clicked on the page).\n      It renders our Leaflet Map and the button used to submit the user's guess.\n      It also sets up client-side state to change the map view from Minneapolis to St.Paul and vice versa.\n    This is imported directly into our page.js file.\n*/\n\n\"use client\";\n\nimport { useEffect, useState, useRef } from \"react\";\nimport * as motion from \"framer-motion/client\";\nimport { MapContainer } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport MapImageWrapper from \"./MapImageWrapper\";\nimport ResultsDialog from \"./ResultsDialog\";\n\nconst minneapolisCenter = [44.97528, -93.23538];\nconst stPaulCenter = [44.98655, -93.18201];\n\nexport default function MapWrapper({\n  submitGuess,\n  gameState,\n  onDialogContinue,\n}) {\n  const [viewStPaul, setViewStPaul] = useState(false);\n  const [guess, setGuess] = useState(\n    viewStPaul ? stPaulCenter : minneapolisCenter,\n  );\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  // we create this ref here but we actually set it in MapImageWrapper\n  const mapRef = useRef(null);\n\n  /*\n    The array at the end of this useEffect tells React when to run the code inside of it\n    Any time something in the array (called a dependency array) changes, the code runs.\n    In our case any time the gameState is updated (when the user submits a guess)\n    or any time the viewStPaul state is updated (when the user switches to Minneapolis / St Paul),\n    we reset the guess state to the center and use the mapRef we set in MapImageWrapper to pan the Leaflet map to the center.\n  */\n  useEffect(() => {\n    if (mapRef.current) {\n      if (viewStPaul) {\n        mapRef.current.setView(stPaulCenter, 16);\n        setGuess(stPaulCenter);\n      } else {\n        mapRef.current.setView(minneapolisCenter, 16);\n        setGuess(minneapolisCenter);\n      }\n    }\n  }, [gameState, viewStPaul]);\n\n  useEffect(() => {\n    if (gameState.gameStarted) {\n      setDialogOpen(true);\n    }\n  }, [gameState.round]);\n\n  return (\n    <>\n      <MapContainer\n        center={viewStPaul ? stPaulCenter : minneapolisCenter}\n        minZoom={15}\n        zoom={16}\n        maxZoom={18}\n        scrollWheelZoom={true}\n        className=\"h-dvh w-dvw\"\n      >\n        <MapImageWrapper mapRef={mapRef} setGuess={setGuess} guess={guess} />\n      </MapContainer>\n      <motion.button\n        className=\"fixed left-0 right-0 top-6 z-[1000] mx-auto w-min whitespace-nowrap rounded-full bg-rose-600 px-4 py-2 font-medium text-white hover:bg-rose-700\"\n        whileHover={{ scale: 1.2 }}\n        whileTap={{ scale: 0.8 }}\n        onClick={() => setViewStPaul((currentState) => !currentState)}\n      >\n        Go to {viewStPaul ? \"Minneapolis\" : \"St Paul\"}\n      </motion.button>\n      <motion.button\n        className=\"fixed bottom-6 left-0 right-0 z-[1000] mx-auto w-min whitespace-nowrap rounded-full bg-rose-600 px-4 py-2 font-medium text-white hover:bg-rose-700\"\n        whileHover={{ scale: 1.2 }}\n        whileTap={{ scale: 0.8 }}\n        onClick={() => submitGuess(guess)}\n      >\n        Submit Guess\n      </motion.button>\n      <ResultsDialog\n        gameState={gameState}\n        open={dialogOpen}\n        setDialogOpen={setDialogOpen}\n        onContinue={onDialogContinue}\n      />\n    </>\n  );\n}\n```\n\n```js frontend/app/play/_components/ResultsDialog.js\n\"use client\";\nimport { MapContainer, Polyline } from \"react-leaflet\";\nimport MapImageWrapper from \"./MapImageWrapper\";\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function ResultsDialog({\n  gameState,\n  open,\n  setDialogOpen,\n  onContinue,\n}) {\n  const map = useRef(null);\n  const [actuallyShow, setActuallyShow] = useState(false);\n\n  useEffect(() => {\n    if (gameState.allLocsUsed.length > 0) {\n      setTimeout(() => setActuallyShow(true), 10);\n    }\n  }, [gameState.allLocsUsed]);\n\n  if (!open) return null;\n\n  function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n    var R = 6371; // Radius of the Earth in kilometers\n    var dLat = deg2rad(lat2 - lat1); // Difference in latitude\n    var dLon = deg2rad(lon2 - lon1); // Difference in longitude\n    var a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(deg2rad(lat1)) *\n        Math.cos(deg2rad(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var distance = R * c; // Distance in kilometers\n    return distance;\n  }\n\n  function deg2rad(deg) {\n    return deg * (Math.PI / 180);\n  }\n\n  var actualLoc = [\n    gameState.allLocsUsed[gameState.allLocsUsed.length - 1]?.latitude,\n    gameState.allLocsUsed[gameState.allLocsUsed.length - 1]?.longitude,\n  ];\n  var userGuessLoc = [gameState.lastGuessLat, gameState.lastGuessLng];\n  var dialogCenter = [\n    (actualLoc[0] + userGuessLoc[0]) / 2,\n    (actualLoc[1] + userGuessLoc[1]) / 2,\n  ];\n  var dist = getDistanceFromLatLonInKm(\n    actualLoc[0],\n    actualLoc[1],\n    userGuessLoc[0],\n    userGuessLoc[1],\n  );\n  console.log(dist);\n  var myZoom = 0;\n  if (dist < 0.1) {\n    myZoom = 18;\n  } else if (dist < 0.6) {\n    myZoom = 16;\n  } else if (dist < 1) {\n    myZoom = 15;\n  } else {\n    myZoom = 14;\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-[1000] flex items-center justify-center\">\n      {/* Background overlay with blur */}\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 backdrop-blur-md\"></div>\n\n      {/* Dialog container */}\n      <dialog\n        className=\"relative z-[1100] mx-4 w-full max-w-md rounded-lg bg-white p-6 text-center\"\n        open={open}\n      >\n        <div className=\"mb-4 text-lg font-semibold\">Results</div>\n        <p>Your guess was {gameState.lastGuessD} meters away.</p>\n        <p>You earned {gameState.lastGuessPoints} points!</p>\n\n        {gameState.allLocsUsed.length > 0 && actuallyShow && (\n          <div className=\"mt-4 flex justify-center\">\n            <MapContainer\n              center={dialogCenter}\n              minZoom={14}\n              zoom={myZoom}\n              maxZoom={20}\n              scrollWheelZoom={true}\n              className=\"h-96 w-96\"\n            >\n              <MapImageWrapper\n                mapRef={map}\n                guess={userGuessLoc}\n                setGuess={() => {}}\n                actualLocation={actualLoc}\n              />\n              <Polyline\n                positions={[actualLoc, userGuessLoc]} // Line connecting the two locations\n                pathOptions={{\n                  color: \"black\", // Color of the line\n                  dashArray: \"10, 10\", // Dotted line style (alternating dashes)\n                  weight: 3, // Line thickness\n                }}\n              />\n            </MapContainer>\n          </div>\n        )}\n\n        <button\n          className=\"mt-6 rounded-full bg-rose-600 px-4 py-2 text-white hover:bg-rose-700\"\n          onClick={() => {\n            onContinue();\n            setDialogOpen(false);\n          }}\n        >\n          Continue\n        </button>\n      </dialog>\n    </div>\n  );\n}\n```\n\n```js frontend/app/play/_components/ResizeableMap.js\n\"use client\";\n\nimport { MapTrifold, X } from \"@phosphor-icons/react\";\nimport MapWrapper from \"./MapWrapper\";\nimport * as motion from \"framer-motion/client\";\nimport { useState } from \"react\";\n\nexport default function ResizeableMap({ gameState, submitGuess }) {\n  const [viewMap, setViewMap] = useState(false);\n\n  if (viewMap) {\n    return (\n      <div className=\"fixed inset-0 z-[900] backdrop-blur-md\">\n        <div className=\"scale-[90%] overflow-hidden rounded-xl\">\n          <MapWrapper\n            gameState={gameState}\n            submitGuess={submitGuess}\n            onDialogContinue={() => setViewMap(false)}\n          />\n        </div>\n        <motion.button\n          whileHover={{ scale: 1.2 }}\n          whileTap={{ scale: 0.8 }}\n          onClick={() => setViewMap(false)}\n          className=\"absolute right-4 top-4 rounded-full bg-rose-600 p-2.5\"\n        >\n          <X className=\"h-6 w-6 text-white\" />\n        </motion.button>\n      </div>\n    );\n  }\n\n  return (\n    <motion.button\n      whileHover={{ scale: 1.2, x: \"-.9rem\", y: \"-.9rem\" }}\n      onClick={() => setViewMap(true)}\n      className=\"fixed bottom-0 right-0 z-[800] flex flex-col items-center rounded-tl-full bg-rose-600 pb-8 pl-12 pr-8 pt-12 text-white shadow\"\n    >\n      <MapTrifold className=\"h-12 w-12\" />\n      <span className=\"font-medium\">Open Map</span>\n    </motion.button>\n  );\n}\n```\n\n\nCan you take a look at my code and diagnose any unwanted errors or unintentional behavior?\nSure, let's review the code and identify any potential issues or unintentional behavior.\n\n### `ImageView.js`\nThis component seems to be working as expected. It loads an image based on the `gameState.loc` and renders the `ResizeableMap` component.\n\n### `MapWrapper.js`\nThis component handles the map rendering and the results dialog. Let's ensure the state management is correct.\n\n### `ResultsDialog.js`\nThis component displays the results dialog and handles the \"Continue\" button click.\n\n### `ResizeableMap.js`\nThis component toggles the visibility of the map and includes the `MapWrapper`.\n\nLet's go through each component and ensure the logic is correct.\n\n### `ImageView.js`\n```js\n\"use client\";\n\nimport Image from \"next/image\";\nimport { useState, useEffect } from \"react\";\nimport ResizeableMap from \"./ResizeableMap\";\n\nfunction getFullUrl(id) {\n  return `https://utfs.io/a/e9dxf42twp/${id}`;\n}\n\nexport default function ImageView({ submitGuess, gameState }) {\n  const [photo, setPhoto] = useState(null);\n\n  useEffect(() => {\n    if (gameState.loc) {\n      setPhoto(gameState.loc);\n    }\n  }, [gameState.loc]);\n\n  if (!photo) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <>\n      <div className=\"relative flex h-dvh w-dvw items-center justify-center bg-gray-500\">\n        <div>\n          <Image fill src={getFullUrl(photo.imageId)} className=\"blur-xl\" />\n        </div>\n        <Image\n          fill\n          src={getFullUrl(photo.imageId)}\n          className=\"h-full w-full object-contain object-center\"\n        />\n      </div>\n      <ResizeableMap gameState={gameState} submitGuess={submitGuess} />\n    </>\n  );\n}\n```\n\n### `MapWrapper.js`\n```js\n\"use client\";\n\nimport { useEffect, useState, useRef } from \"react\";\nimport * as motion from \"framer-motion/client\";\nimport { MapContainer } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport MapImageWrapper from \"./MapImageWrapper\";\nimport ResultsDialog from \"./ResultsDialog\";\n\nconst minneapolisCenter = [44.97528, -93.23538];\nconst stPaulCenter = [44.98655, -93.18201];\n\nexport default function MapWrapper({\n  submitGuess,\n  gameState,\n  onDialogContinue,\n}) {\n  const [viewStPaul, setViewStPaul] = useState(false);\n  const [guess, setGuess] = useState(\n    viewStPaul ? stPaulCenter : minneapolisCenter,\n  );\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  // we create this ref here but we actually set it in MapImageWrapper\n  const mapRef = useRef(null);\n\n  useEffect(() => {\n    if (mapRef.current) {\n      if (viewStPaul) {\n        mapRef.current.setView(stPaulCenter, 16);\n        setGuess(stPaulCenter);\n      } else {\n        mapRef.current.setView(minneapolisCenter, 16);\n        setGuess(minneapolisCenter);\n      }\n    }\n  }, [gameState, viewStPaul]);\n\n  useEffect(() => {\n    if (gameState.round > 0) {\n      setDialogOpen(false); // Ensure dialog is closed when a new round starts\n    }\n  }, [gameState.round]);\n\n  const handleDialogContinue = () => {\n    setDialogOpen(false);\n    onDialogContinue();\n  };\n\n  const handleSubmitGuess = (guess) => {\n    submitGuess(guess);\n    setDialogOpen(true); // Open the dialog when a guess is submitted\n  };\n\n  return (\n    <>\n      <MapContainer\n        center={viewStPaul ? stPaulCenter : minneapolisCenter}\n        minZoom={15}\n        zoom={16}\n        maxZoom={18}\n        scrollWheelZoom={true}\n        className=\"h-dvh w-dvw\"\n      >\n        <MapImageWrapper mapRef={mapRef} setGuess={setGuess} guess={guess} />\n      </MapContainer>\n      <motion.button\n        className=\"fixed left-0 right-0 top-6 z-[1000] mx-auto w-min whitespace-nowrap rounded-full bg-rose-600 px-4 py-2 font-medium text-white hover:bg-rose-700\"\n        whileHover={{ scale: 1.2 }}\n        whileTap={{ scale: 0.8 }}\n        onClick={() => setViewStPaul((currentState) => !currentState)}\n      >\n        Go to {viewStPaul ? \"Minneapolis\" : \"St Paul\"}\n      </motion.button>\n      <motion.button\n        className=\"fixed bottom-6 left-0 right-0 z-[1000] mx-auto w-min whitespace-nowrap rounded-full bg-rose-600 px-4 py-2 font-medium text-white hover:bg-rose-700\"\n        whileHover={{ scale: 1.2 }}\n        whileTap={{ scale: 0.8 }}\n        onClick={() => handleSubmitGuess(guess)}\n      >\n        Submit Guess\n      </motion.button>\n      <ResultsDialog\n        gameState={gameState}\n        open={dialogOpen}\n        setDialogOpen={setDialogOpen}\n        onContinue={handleDialogContinue}\n      />\n    </>\n  );\n}\n```\n\n### `ResultsDialog.js`\n```js\n\"use client\";\nimport { MapContainer, Polyline } from \"react-leaflet\";\nimport MapImageWrapper from \"./MapImageWrapper\";\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function ResultsDialog({\n  gameState,\n  open,\n  setDialogOpen,\n  onContinue,\n}) {\n  const map = useRef(null);\n  const [actuallyShow, setActuallyShow] = useState(false);\n\n  useEffect(() => {\n    if (gameState.allLocsUsed.length > 0) {\n      setTimeout(() => setActuallyShow(true), 10);\n    }\n  }, [gameState.allLocsUsed]);\n\n  if (!open) return null;\n\n  function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n    var R = 6371; // Radius of the Earth in kilometers\n    var dLat = deg2rad(lat2 - lat1); // Difference in latitude\n    var dLon = deg2rad(lon2 - lon1); // Difference in longitude\n    var a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(deg2rad(lat1)) *\n        Math.cos(deg2rad(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var distance = R * c; // Distance in kilometers\n    return distance;\n  }\n\n  function deg2rad(deg) {\n    return deg * (Math.PI / 180);\n  }\n\n  var actualLoc = [\n    gameState.allLocsUsed[gameState.allLocsUsed.length - 1]?.latitude,\n    gameState.allLocsUsed[gameState.allLocsUsed.length - 1]?.longitude,\n  ];\n  var userGuessLoc = [gameState.lastGuessLat, gameState.lastGuessLng];\n  var dialogCenter = [\n    (actualLoc[0] + userGuessLoc[0]) / 2,\n    (actualLoc[1] + userGuessLoc[1]) / 2,\n  ];\n  var dist = getDistanceFromLatLonInKm(\n    actualLoc[0],\n    actualLoc[1],\n    userGuessLoc[0],\n    userGuessLoc[1],\n  );\n  console.log(dist);\n  var myZoom = 0;\n  if (dist < 0.1) {\n    myZoom = 18;\n  } else if (dist < 0.6) {\n    myZoom = 16;\n  } else if (dist < 1) {\n    myZoom = 15;\n  } else {\n    myZoom = 14;\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-[1000] flex items-center justify-center\">\n      {/* Background overlay with blur */}\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 backdrop-blur-md\"></div>\n\n      {/* Dialog container */}\n      <dialog\n        className=\"relative z-[1100] mx-4 w-full max-w-md rounded-lg bg-white p-6 text-center\"\n        open={open}\n      >\n        <div className=\"mb-4 text-lg font-semibold\">Results</div>\n        <p>Your guess was {gameState.lastGuessD} meters away.</p>\n        <p>You earned {gameState.lastGuessPoints} points!</p>\n\n        {gameState.allLocsUsed.length > 0 && actuallyShow && (\n          <div className=\"mt-4 flex justify-center\">\n            <MapContainer\n              center={dialogCenter}\n              minZoom={14}\n              zoom={myZoom}\n              maxZoom={20}\n              scrollWheelZoom={true}\n              className=\"h-96 w-96\"\n            >\n              <MapImageWrapper\n                mapRef={map}\n                guess={userGuessLoc}\n                setGuess={() => {}}\n                actualLocation={actualLoc}\n              />\n              <Polyline\n                positions={[actualLoc, userGuessLoc]} // Line connecting the two locations\n                pathOptions={{\n                  color: \"black\", // Color of the line\n                  dashArray: \"10, 10\", // Dotted line style (alternating dashes)\n                  weight: 3, // Line thickness\n                }}\n              />\n            </MapContainer>\n          </div>\n        )}\n\n        <button\n          className=\"mt-6 rounded-full bg-rose-600 px-4 py-2 text-white hover:bg-rose-700\"\n          onClick={() => {\n            onContinue();\n            setDialogOpen(false);\n          }}\n        >\n          Continue\n        </button>\n      </dialog>\n    </div>\n  );\n}\n```\n\n### `ResizeableMap.js`\n```js\n\"use client\";\n\nimport { MapTrifold, X } from \"@phosphor-icons/react\";\nimport MapWrapper from \"./MapWrapper\";\nimport * as motion from \"framer-motion/client\";\nimport { useState } from \"react\";\n\nexport default function ResizeableMap({ gameState, submitGuess }) {\n  const [viewMap, setViewMap] = useState(false);\n\n  if (viewMap) {\n    return (\n      <div className=\"fixed inset-0 z-[900] backdrop-blur-md\">\n        <div className=\"scale-[90%] overflow-hidden rounded-xl\">\n          <MapWrapper\n            gameState={gameState}\n            submitGuess={submitGuess}\n            onDialogContinue={() => setViewMap(false)}\n          />\n        </div>\n        <motion.button\n          whileHover={{ scale: 1.2 }}\n          whileTap={{ scale: 0.8 }}\n          onClick={() => setViewMap(false)}\n          className=\"absolute right-4 top-4 rounded-full bg-rose-600 p-2.5\"\n        >\n          <X className=\"h-6 w-6 text-white\" />\n        </motion.button>\n      </div>\n    );\n  }\n\n  return (\n    <motion.button\n      whileHover={{ scale: 1.2, x: \"-.9rem\", y: \"-.9rem\" }}\n      onClick={() => setViewMap(true)}\n      className=\"fixed bottom-0 right-0 z-[800] flex flex-col items-center rounded-tl-full bg-rose-600 pb-8 pl-12 pr-8 pt-12 text-white shadow\"\n    >\n      <MapTrifold className=\"h-12 w-12\" />\n      <span className=\"font-medium\">Open Map</span>\n    </motion.button>\n  );\n}\n```\n\n### Diagnosis and Fixes\n\n1. **Dialog State Management**: Ensure that the `dialogOpen` state is correctly managed and reset when necessary.\n2. **Submit Guess Handling**: Ensure that the `handleSubmitGuess` function correctly sets the `dialogOpen` state to `true` when a guess is submitted.\n3. **Continue Button Handling**: Ensure that the `handleDialogContinue` function correctly sets the `dialogOpen` state to `false` and calls the `onDialogContinue` function.\n\n### Updated `MapWrapper.js`\n```js\n\"use client\";\n\nimport { useEffect, useState, useRef } from \"react\";\nimport * as motion from \"framer-motion/client\";\nimport { MapContainer } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport MapImageWrapper from \"./MapImageWrapper\";\nimport ResultsDialog from \"./ResultsDialog\";\n\nconst minneapolisCenter = [44.97528, -93.23538];\nconst stPaulCenter = [44.98655, -93.18201];\n\nexport default function MapWrapper({\n  submitGuess,\n  gameState,\n  onDialogContinue,\n}) {\n  const [viewStPaul, setViewStPaul] = useState(false);\n  const [guess, setGuess] = useState(\n    viewStPaul ? stPaulCenter : minneapolisCenter,\n  );\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  // we create this ref here but we actually set it in MapImageWrapper\n  const mapRef = useRef(null);\n\n  useEffect(() => {\n    if (mapRef.current) {\n      if (viewStPaul) {\n        mapRef.current.setView(stPaulCenter, 16);\n        setGuess(stPaulCenter);\n      } else {\n        mapRef.current.setView(minneapolisCenter, 16);\n        setGuess(minneapolisCenter);\n      }\n    }\n  }, [gameState, viewStPaul]);\n\n  useEffect(() => {\n    if (gameState.round > 0) {\n      setDialogOpen(false); // Ensure dialog is closed when a new round starts\n    }\n  }, [gameState.round]);\n\n  const handleDialogContinue = () => {\n    setDialogOpen(false);\n    onDialogContinue();\n  };\n\n  const handleSubmitGuess = (guess) => {\n    submitGuess(guess);\n    setDialogOpen(true); // Open the dialog when a guess is submitted\n  };\n\n  return (\n    <>\n      <MapContainer\n        center={viewStPaul ? stPaulCenter : minneapolisCenter}\n        minZoom={15}\n        zoom={16}\n        maxZoom={18}\n        scrollWheelZoom={true}\n        className=\"h-dvh w-dvw\"\n      >\n        <MapImageWrapper mapRef={mapRef} setGuess={setGuess} guess={guess} />\n      </MapContainer>\n      <motion.button\n        className=\"fixed left-0 right-0 top-6 z-[1000] mx-auto w-min whitespace-nowrap rounded-full bg-rose-600 px-4 py-2 font-medium text-white hover:bg-rose-700\"\n        whileHover={{ scale: 1.2 }}\n        whileTap={{ scale: 0.8 }}\n        onClick={() => setViewStPaul((currentState) => !currentState)}\n      >\n        Go to {viewStPaul ? \"Minneapolis\" : \"St Paul\"}\n      </motion.button>\n      <motion.button\n        className=\"fixed bottom-6 left-0 right-0 z-[1000] mx-auto w-min whitespace-nowrap rounded-full bg-rose-600 px-4 py-2 font-medium text-white hover:bg-rose-700\"\n        whileHover={{ scale: 1.2 }}\n        whileTap={{ scale: 0.8 }}\n        onClick={() => handleSubmitGuess(guess)}\n      >\n        Submit Guess\n      </motion.button>\n      <ResultsDialog\n        gameState={gameState}\n        open={dialogOpen}\n        setDialogOpen={setDialogOpen}\n        onContinue={handleDialogContinue}\n      />\n    </>\n  );\n}\n```\n\n### Updated `ResultsDialog.js`\n```js\n\"use client\";\nimport { MapContainer, Polyline } from \"react-leaflet\";\nimport MapImageWrapper from \"./MapImageWrapper\";\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function ResultsDialog({\n  gameState,\n  open,\n  setDialogOpen,\n  onContinue,\n}) {\n  const map = useRef(null);\n  const [actuallyShow, setActuallyShow] = useState(false);\n\n  useEffect(() => {\n    if (gameState.allLocsUsed.length > 0) {\n      setTimeout(() => setActuallyShow(true), 10);\n    }\n  }, [gameState.allLocsUsed]);\n\n  if (!open) return null;\n\n  function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n    var R = 6371; // Radius of the Earth in kilometers\n    var dLat = deg2rad(lat2 - lat1); // Difference in latitude\n    var dLon = deg2rad(lon2 - lon1); // Difference in longitude\n    var a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(deg2rad(lat1)) *\n        Math.cos(deg2rad(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var distance = R * c; // Distance in kilometers\n    return distance;\n  }\n\n  function deg2rad(deg) {\n    return deg * (Math.PI / 180);\n  }\n\n  var actualLoc = [\n    gameState.allLocsUsed[gameState.allLocsUsed.length - 1]?.latitude,\n    gameState.allLocsUsed[gameState.allLocsUsed.length - 1]?.longitude,\n  ];\n  var userGuessLoc = [gameState.lastGuessLat, gameState.lastGuessLng];\n  var dialogCenter = [\n    (actualLoc[0] + userGuessLoc[0]) / 2,\n    (actualLoc[1] + userGuessLoc[1]) / 2,\n  ];\n  var dist = getDistanceFromLatLonInKm(\n    actualLoc[0],\n    actualLoc[1],\n    userGuessLoc[0],\n    userGuessLoc[1],\n  );\n  console.log(dist);\n  var myZoom = 0;\n  if (dist < 0.1) {\n    myZoom = 18;\n  } else if (dist < 0.6) {\n    myZoom = 16;\n  } else if (dist < 1) {\n    myZoom = 15;\n  } else {\n    myZoom = 14;\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-[1000] flex items-center justify-center\">\n      {/* Background overlay with blur */}\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 backdrop-blur-md\"></div>\n\n      {/* Dialog container */}\n      <dialog\n        className=\"relative z-[1100] mx-4 w-full max-w-md rounded-lg bg-white p-6 text-center\"\n        open={open}\n      >\n        <div className=\"mb-4 text-lg font\nkeep going\nCertainly! Let's continue with the `ResultsDialog.js` component to ensure it correctly handles the dialog state and displays the results.\n\n### Updated `ResultsDialog.js`\n```js\n\"use client\";\nimport { MapContainer, Polyline } from \"react-leaflet\";\nimport MapImageWrapper from \"./MapImageWrapper\";\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function ResultsDialog({\n  gameState,\n  open,\n  setDialogOpen,\n  onContinue,\n}) {\n  const map = useRef(null);\n  const [actuallyShow, setActuallyShow] = useState(false);\n\n  useEffect(() => {\n    if (gameState.allLocsUsed.length > 0) {\n      setTimeout(() => setActuallyShow(true), 10);\n    }\n  }, [gameState.allLocsUsed]);\n\n  if (!open) return null;\n\n  function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n    var R = 6371; // Radius of the Earth in kilometers\n    var dLat = deg2rad(lat2 - lat1); // Difference in latitude\n    var dLon = deg2rad(lon2 - lon1); // Difference in longitude\n    var a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(deg2rad(lat1)) *\n        Math.cos(deg2rad(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var distance = R * c; // Distance in kilometers\n    return distance;\n  }\n\n  function deg2rad(deg) {\n    return deg * (Math.PI / 180);\n  }\n\n  var actualLoc = [\n    gameState.allLocsUsed[gameState.allLocsUsed.length - 1]?.latitude,\n    gameState.allLocsUsed[gameState.allLocsUsed.length - 1]?.longitude,\n  ];\n  var userGuessLoc = [gameState.lastGuessLat, gameState.lastGuessLng];\n  var dialogCenter = [\n    (actualLoc[0] + userGuessLoc[0]) / 2,\n    (actualLoc[1] + userGuessLoc[1]) / 2,\n  ];\n  var dist = getDistanceFromLatLonInKm(\n    actualLoc[0],\n    actualLoc[1],\n    userGuessLoc[0],\n    userGuessLoc[1],\n  );\n  console.log(dist);\n  var myZoom = 0;\n  if (dist < 0.1) {\n    myZoom = 18;\n  } else if (dist < 0.6) {\n    myZoom = 16;\n  } else if (dist < 1) {\n    myZoom = 15;\n  } else {\n    myZoom = 14;\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-[1000] flex items-center justify-center\">\n      {/* Background overlay with blur */}\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 backdrop-blur-md\"></div>\n\n      {/* Dialog container */}\n      <dialog\n        className=\"relative z-[1100] mx-4 w-full max-w-md rounded-lg bg-white p-6 text-center\"\n        open={open}\n      >\n        <div className=\"mb-4 text-lg font-semibold\">Results</div>\n        <p>Your guess was {gameState.lastGuessD} meters away.</p>\n        <p>You earned {gameState.lastGuessPoints} points!</p>\n\n        {gameState.allLocsUsed.length > 0 && actuallyShow && (\n          <div className=\"mt-4 flex justify-center\">\n            <MapContainer\n              center={dialogCenter}\n              minZoom={14}\n              zoom={myZoom}\n              maxZoom={20}\n              scrollWheelZoom={true}\n              className=\"h-96 w-96\"\n            >\n              <MapImageWrapper\n                mapRef={map}\n                guess={userGuessLoc}\n                setGuess={() => {}}\n                actualLocation={actualLoc}\n              />\n              <Polyline\n                positions={[actualLoc, userGuessLoc]} // Line connecting the two locations\n                pathOptions={{\n                  color: \"black\", // Color of the line\n                  dashArray: \"10, 10\", // Dotted line style (alternating dashes)\n                  weight: 3, // Line thickness\n                }}\n              />\n            </MapContainer>\n          </div>\n        )}\n\n        <button\n          className=\"mt-6 rounded-full bg-rose-600 px-4 py-2 text-white hover:bg-rose-700\"\n          onClick={() => {\n            onContinue();\n            setDialogOpen(false);\n          }}\n        >\n          Continue\n        </button>\n      </dialog>\n    </div>\n  );\n}\n```\n\n### Updated `ResizeableMap.js`\n```js\n\"use client\";\n\nimport { MapTrifold, X } from \"@phosphor-icons/react\";\nimport MapWrapper from \"./MapWrapper\";\nimport * as motion from \"framer-motion/client\";\nimport { useState } from \"react\";\n\nexport default function ResizeableMap({ gameState, submitGuess }) {\n  const [viewMap, setViewMap] = useState(false);\n\n  if (viewMap) {\n    return (\n      <div className=\"fixed inset-0 z-[900] backdrop-blur-md\">\n        <div className=\"scale-[90%] overflow-hidden rounded-xl\">\n          <MapWrapper\n            gameState={gameState}\n            submitGuess={submitGuess}\n            onDialogContinue={() => setViewMap(false)}\n          />\n        </div>\n        <motion.button\n          whileHover={{ scale: 1.2 }}\n          whileTap={{ scale: 0.8 }}\n          onClick={() => setViewMap(false)}\n          className=\"absolute right-4 top-4 rounded-full bg-rose-600 p-2.5\"\n        >\n          <X className=\"h-6 w-6 text-white\" />\n        </motion.button>\n      </div>\n    );\n  }\n\n  return (\n    <motion.button\n      whileHover={{ scale: 1.2, x: \"-.9rem\", y: \"-.9rem\" }}\n      onClick={() => setViewMap(true)}\n      className=\"fixed bottom-0 right-0 z-[800] flex flex-col items-center rounded-tl-full bg-rose-600 pb-8 pl-12 pr-8 pt-12 text-white shadow\"\n    >\n      <MapTrifold className=\"h-12 w-12\" />\n      <span className=\"font-medium\">Open Map</span>\n    </motion.button>\n  );\n}\n```\n\n### Summary of Changes\n1. **`MapWrapper.js`**:\n   - Added `handleSubmitGuess` to set `dialogOpen` to `true` when a guess is submitted.\n   - Ensured `handleDialogContinue` sets `dialogOpen` to `false` and calls `onDialogContinue`.\n\n2. **`ResultsDialog.js`**:\n   - Ensured the dialog only appears when `open` is `true`.\n   - Added `setDialogOpen(false)` in the \"Continue\" button click handler to close the dialog.\n\n3. **`ResizeableMap.js`**:\n   - Ensured the `MapWrapper` component is correctly rendered and the `onDialogContinue` function is passed down to close the map view.\n\nThese changes should ensure that the `ResultsDialog` only appears when a guess is submitted and disappears when the \"Continue\" button is clicked, without persisting across different rounds. If you encounter any specific issues, please let me know so I can provide further assistance.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1021}}},{"id":{"replica_id":0,"value":35},"start":11174,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1022}}},{"id":{"replica_id":0,"value":36},"start":18884,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1023}}},{"id":{"replica_id":0,"value":176},"start":19155,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1024}}},{"id":{"replica_id":0,"value":177},"start":27134,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1025}}},{"id":{"replica_id":0,"value":239},"start":27226,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1026}}},{"id":{"replica_id":0,"value":240},"start":35108,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1027}}},{"id":{"replica_id":0,"value":375},"start":35145,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1028}}},{"id":{"replica_id":0,"value":376},"start":43052,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1029}}},{"id":{"replica_id":0,"value":724},"start":54210,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1030}}},{"id":{"replica_id":0,"value":725},"start":69328,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1031}}},{"id":{"replica_id":0,"value":771},"start":69339,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1032}}},{"id":{"replica_id":0,"value":772},"start":75462,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1033}}}],"summary":"Fixing Persistent Results Dialog in MapWrapper Component","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":3,"end":1431},"icon":"File","label":"frontend/app/play/_components/ResizeableMap.js","metadata":{"path":"frontend/app/play/_components/ResizeableMap.js"}},{"range":{"start":1432,"end":5157},"icon":"File","label":"frontend/app/play/_components/ResultsDialog.js","metadata":{"path":"frontend/app/play/_components/ResultsDialog.js"}},{"range":{"start":5158,"end":6157},"icon":"File","label":"frontend/app/play/_components/ImageView.js","metadata":{"path":"frontend/app/play/_components/ImageView.js"}},{"range":{"start":6158,"end":11068},"icon":"File","label":"frontend/app/play/_components/MapWrapper.js","metadata":{"path":"frontend/app/play/_components/MapWrapper.js"}},{"range":{"start":43052,"end":44051},"icon":"File","label":"frontend/app/play/_components/ImageView.js","metadata":{"path":"frontend/app/play/_components/ImageView.js"}},{"range":{"start":44052,"end":48962},"icon":"File","label":"frontend/app/play/_components/MapWrapper.js","metadata":{"path":"frontend/app/play/_components/MapWrapper.js"}},{"range":{"start":48963,"end":52688},"icon":"File","label":"frontend/app/play/_components/ResultsDialog.js","metadata":{"path":"frontend/app/play/_components/ResultsDialog.js"}},{"range":{"start":52689,"end":54117},"icon":"File","label":"frontend/app/play/_components/ResizeableMap.js","metadata":{"path":"frontend/app/play/_components/ResizeableMap.js"}}]}